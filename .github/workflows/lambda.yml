name: lambda
on:
  push:
    branches:
      - main
      - aka/lambda
permissions:
#   id-token: write
  contents: read # This is required for actions/checkout

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    # environment:
    #   name: ${{ needs.get-environment.outputs.environment }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v2
    #     with:
    #       role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
    #       role-session-name: github-actions-store-public-ecr
    #       aws-region: us-east-1

    #   - name: Login to public Amazon ECR
    #     id: login-ecr-public
    #     uses: aws-actions/amazon-ecr-login@v1
    #     with:
    #       registry-type: public

    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v2
    #     with:
    #       role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
    #       role-session-name: github-actions-store-build-push
    #       aws-region: us-west-2

    #   - name: Login to Amazon ECR
    #     id: login-ecr
    #     uses: aws-actions/amazon-ecr-login@v1

      - name: Build base image
        id: build-base-image
        env:
          ECR_REGISTRY: "fakereg" # ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: webkit-content-filter-validator
          IMAGE_TAG: latest
        run: |
          #  TODO add caching back
          docker buildx build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-lambda-image
        env:
          ECR_REGISTRY: "fakereg" # ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: webkit-content-filter-validator-lambda
          IMAGE_TAG: main-${{ github.sha }}
        run: |
          # --cache-from=type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:latest \
          docker buildx build --push --build-arg BASE_IMAGE=${{ steps.build-base-image.outputs.image }} \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          # Cannot use `--cache-to` due to https://github.com/docker/buildx/issues/271
          # Caching to `latest` with inline caching which seems to work

    #   - name: Download task definition
    #     run: |
    #       aws ecs describe-task-definition --task-definition store --query taskDefinition > task-definition.json

    #   - name: Fill in the new image ID in the Amazon ECS task definition
    #     id: task-def
    #     uses: aws-actions/amazon-ecs-render-task-definition@v1
    #     with:
    #       task-definition: task-definition.json
    #       container-name: store
    #       image: ${{ steps.build-image.outputs.image }}

    #   - name: Deploy Amazon ECS task definition
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: ${{ steps.task-def.outputs.task-definition }}
    #       service: store
    #       cluster: store
    #       wait-for-service-stability: true
